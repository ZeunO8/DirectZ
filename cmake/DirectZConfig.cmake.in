@PACKAGE_INIT@

if("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
    find_package(Threads REQUIRED)
	find_package(PkgConfig REQUIRED)
	pkg_check_modules(GTKMM REQUIRED IMPORTED_TARGET gtkmm-3.0)
elseif(ANDROID)
    find_package(Threads REQUIRED)
endif()

# Set variables pointing to install locations
set_and_check(DirectZ_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set(DirectZ_LIBRARIES DirectZ)

if(ANDROID)
    set(VULKAN_LIB_PATH "${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/lib/${ANDROID_TRIPLET}/${ANDROID_PLATFORM_LEVEL}/libvulkan.so")
    set(VULKAN_INCLUDE_PATH "${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include")
    add_library(Vulkan::Vulkan SHARED IMPORTED GLOBAL)
    set_target_properties(Vulkan::Vulkan PROPERTIES
        IMPORTED_LOCATION "${VULKAN_LIB_PATH}"
        INTERFACE_INCLUDE_DIRECTORIES "${VULKAN_INCLUDE_PATH}"
    )
    set(Vulkan_FOUND TRUE)
else()
	find_package(Vulkan REQUIRED)
endif()

message(STATUS "Vulkan_INCLUDE_DIRS: ${Vulkan_INCLUDE_DIRS}")

list(APPEND DirectZ_INCLUDE_DIRS ${Vulkan_INCLUDE_DIRS})

# Load the exported targets
include("${CMAKE_CURRENT_LIST_DIR}/DirectZTargets.cmake")

include("${CMAKE_CURRENT_LIST_DIR}/DZPTargets.cmake")

if(ANDROID)
    set(PACK_DIR ${RES_DIR})
else()
    set(PACK_DIR ${CMAKE_BINARY_DIR}/assets)
endif()

function(pack_assets_at_configure OUTPUT_NAME)
    set(options)
    set(oneValueArgs)
    set(multiValueArgs SOURCES)
    cmake_parse_arguments(PACK "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if(NOT PACK_SOURCES)
        message(FATAL_ERROR "pack_assets_at_configure: SOURCES must be provided")
    endif()

    # Compose the full command
    set(COMMAND_ARGS -o ${OUTPUT_NAME})
    foreach(SRC ${PACK_SOURCES})
        list(APPEND COMMAND_ARGS ${SRC})
    endforeach()

    string(TOUPPER "${CMAKE_BUILD_TYPE}" CAP_BUILD_TYPE)

    get_target_property(dzp_path dzp IMPORTED_LOCATION_${CAP_BUILD_TYPE})

    if(ANDROID)
        string(REPLACE "android/${CMAKE_SYSTEM_PROCESSOR}/" "" dzp_path "${dzp_path}")
    endif()
    
    execute_process(
        COMMAND ${dzp_path} ${COMMAND_ARGS}
        RESULT_VARIABLE result
        OUTPUT_VARIABLE out
        ERROR_VARIABLE err
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )

    if(NOT result EQUAL 0)
        message(FATAL_ERROR "Asset packing failed: ${err}")
    else()
        message(STATUS "Packed assets to ${OUTPUT_NAME}")
    endif()
endfunction()

function(pack_assets OUTPUT_NAME)
    set(options)
    set(oneValueArgs)
    set(multiValueArgs SOURCES)
    cmake_parse_arguments(PACK "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if(NOT PACK_SOURCES)
        message(FATAL_ERROR "pack_assets: SOURCES must be provided")
    endif()

    string(TOUPPER "${CMAKE_BUILD_TYPE}" CAP_BUILD_TYPE)
    if("${CAP_BUILD_TYPE}" STREQUAL "RELWITHDEBINFO")
        set(CAP_BUILD_TYPE RELEASE)
    endif()
    get_target_property(dzp_path dzp IMPORTED_LOCATION_${CAP_BUILD_TYPE})

    if(ANDROID)
        string(REPLACE "android/${CMAKE_SYSTEM_PROCESSOR}/" "" dzp_path "${dzp_path}")
    endif()

    set(COMMAND_ARGS -o ${OUTPUT_NAME})
    foreach(SRC ${PACK_SOURCES})
        list(APPEND COMMAND_ARGS ${SRC})
    endforeach()

    # Ensure full paths for dependency tracking
    set(ABS_SOURCES)
    foreach(SRC ${PACK_SOURCES})
        if(IS_ABSOLUTE "${SRC}")
            list(APPEND ABS_SOURCES "${SRC}")
        else()
            list(APPEND ABS_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/${SRC}")
        endif()
    endforeach()

    # Add custom command to generate packed output
    add_custom_command(
        OUTPUT ${OUTPUT_NAME}
        COMMAND ${dzp_path} ${COMMAND_ARGS}
        DEPENDS ${ABS_SOURCES}
        COMMENT "Packing assets into ${OUTPUT_NAME}"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        VERBATIM
    )

    # Add a dummy custom target so you can depend on it
    add_custom_target(pack_assets_pack ALL
        DEPENDS ${OUTPUT_NAME}
    )
endfunction()

# Optional: check required components if using COMPONENTS in find_package
check_required_components(DirectZ)


if(ANDROID)
    list(APPEND DirectZ_LIBRARIES android log)
endif()