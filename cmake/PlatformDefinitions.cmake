set(BUILD_SHARED_LIBS OFF)

if(ANDROID)
    message(STATUS "Determined Android Host")
	if(CMAKE_ANDROID_ARCH_ABI STREQUAL "armeabi-v7a")
		set(ANDROID_TRIPLET "arm-linux-androideabi")
	elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "arm64-v8a")
		set(ANDROID_TRIPLET "aarch64-linux-android")
	elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86")
		set(ANDROID_TRIPLET "i686-linux-android")
	elseif(CMAKE_ANDROID_ARCH_ABI STREQUAL "x86_64")
		set(ANDROID_TRIPLET "x86_64-linux-android")
	else()
		message(FATAL_ERROR "Unknown ABI: ${CMAKE_ANDROID_ARCH_ABI}")
	endif()
    set(DZ_LIB_PREFIX "lib")
    set(SHARED_DZ_LIB_SUFFIX ".so")
    set(STATIC_DZ_LIB_SUFFIX ".a")
elseif(IOS)
    message(STATUS "Determined iOS Host")
    set(IOS ON)
    set(DZ_LIB_PREFIX "lib")
    set(SHARED_DZ_LIB_SUFFIX ".so")
    set(STATIC_DZ_LIB_SUFFIX ".a")
elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
    set(LINUX ON)
    set(DZ_LIB_PREFIX "lib")
    set(SHARED_DZ_LIB_SUFFIX ".so")
    set(STATIC_DZ_LIB_SUFFIX ".a")
    file(READ "/etc/os-release" OS_RELEASE)
    string(REGEX MATCH "Debian|Ubuntu|Fedora" DIST ${OS_RELEASE})
    message(STATUS "Determined ${DIST} [Linux] Host")
    if(DIST STREQUAL "Debian" OR
        DIST STREQUAL "Ubuntu")
        set(DEB true)
    elseif(DIST STREQUAL "Fedora")
        set(RPM true)
    else()
        message(FATAL_ERROR ">>>> Found unknown distribution <<<<")
    endif()
    set(ZG_LNX_INSTALL_PREFIX /usr/local)
elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
    message(STATUS "Determined MacOS Host")
    set(MACOS ON)
    add_definitions(-DMACOS)
    set(DZ_LIB_PREFIX "lib")
    set(SHARED_DZ_LIB_SUFFIX ".dylib")
    set(STATIC_DZ_LIB_SUFFIX ".a")
    set(ZG_OSX_INSTALL_PREFIX /usr/local)
elseif(WIN32)
    message(STATUS "Determined Windows Host")
    set(WINDOWS ON)
    set(DZ_LIB_PREFIX "")
    set(SHARED_DZ_LIB_SUFFIX ".dll")
    set(STATIC_DZ_LIB_SUFFIX ".lib")
    set(CMAKE_POSITION_INDEPENDENT_CODE FALSE)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
    if(MSVC)
        message(STATUS "Determined MSVC Compiler")
        set(SHADERC_ENABLE_SHARED_CRT OFF)
        if (SHADERC_ENABLE_SHARED_CRT)
            set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
        else()
            set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
        endif()
    endif()
endif()
string(REPLACE "-Werror" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error")

function(dz_setup_target
	TARGET_NAME
	LIBRARY_TYPE
	LIBRARY_DIR
	LIBRARY_PREFIX LIBRARY_NAME IMPLIB_NAME LIBRARY_SUFFIX
    ADD_TO_DZ_LIBRARIES)
	add_library(${TARGET_NAME} ${LIBRARY_TYPE} IMPORTED GLOBAL)
	if(WIN32)
		if(${LIBRARY_TYPE} STREQUAL "STATIC")
			set(LIBRARY_LOCATION "${LIBRARY_DIR}/${LIBRARY_PREFIX}${LIBRARY_NAME}${LIBRARY_SUFFIX}")
		elseif(${LIBRARY_TYPE} STREQUAL "SHARED")
			set(LIBRARY_LOCATION "${LIBRARY_DIR}/${LIBRARY_NAME}.dll")
			set(IMPLIB_LOCATION "${LIBRARY_DIR}/${IMPLIB_NAME}.lib")
			set_target_properties(${TARGET_NAME} PROPERTIES IMPORTED_IMPLIB ${IMPLIB_LOCATION})
		endif()
	else()
		set(LIBRARY_LOCATION "${LIBRARY_DIR}/${LIBRARY_PREFIX}${LIBRARY_NAME}${LIBRARY_SUFFIX}")
	endif()
    set(LAST_LIBRARY_LOCATION ${LIBRARY_LOCATION} PARENT_SCOPE)
    set(LAST_TARGET_NAME ${TARGET_NAME} PARENT_SCOPE)
    if(ADD_TO_DZ_LIBRARIES)
        set(DZ_LIBRARIES ${DZ_LIBRARIES} ${TARGET_NAME} PARENT_SCOPE)
    endif()
    if(EXISTS "${LIBRARY_LOCATION}")
        set(LIBRARY_EXISTS "exists")
    else()
        set(LIBRARY_EXISTS "does not exist")
    endif()
	set_target_properties(${TARGET_NAME} PROPERTIES IMPORTED_LOCATION ${LIBRARY_LOCATION})
    set(DZ_LIBRARIES_TO_INSTALL ${DZ_LIBRARIES_TO_INSTALL} ${LIBRARY_LOCATION} ${IMPLIB_LOCATION} PARENT_SCOPE)
    # message(STATUS "${TARGET_NAME} \"${LIBRARY_LOCATION}\" library ${LIBRARY_EXISTS}")
endfunction()

# if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
#     set(CMAKE_LINKER "ld.bfd" CACHE FILEPATH "Use GNU BFD linker" FORCE)
# elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
#     set(CMAKE_LINKER "ld.lld" CACHE FILEPATH "Use LLVM LLD linker" FORCE)
# elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
#     set(CMAKE_LINKER "link.exe" CACHE FILEPATH "Use MSVC linker" FORCE)
# else()
#     message(FATAL_ERROR "Unsupported compiler: ${CMAKE_CXX_COMPILER_ID}")
# endif()

if(WIN32 AND EXISTS "${CMAKE_SOURCE_DIR}/fix_format_security.bat")
    add_custom_target(prebuild_fix_format_security ALL
        COMMAND "${CMAKE_SOURCE_DIR}/fix_format_security.bat" "${CMAKE_BINARY_DIR}"
        COMMENT "Running format-security fixup batch script"
    )
endif()